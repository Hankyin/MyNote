欢迎来到vimtutor 1.7版
==============================
vim是一个拥有许多命令的强大编辑器，这无需多言。这篇教程会教给你足够多的命令让你
能够将vim作为一个可以满足所有需要的编辑器。
完成这个教程所需的时间大概是25-30分钟，这取决于你在实验上话费的时间。
注意：
课程中的命令会改变文本，将这份文件拷贝一份来练习（如果你是用"vimtutor“启动的，
那它就已经是一份拷贝了）
要记住这篇教程是通过使用来教学的，这十分重要，它意味着你需要执行合适的命令来学
习他们。如果你只是阅读这篇文本，那你很快就会忘记所有的命令。
现在，确保你的大写锁定键没有被按下，然后按 “j” 键来移动光标多次直到1.1课布满
屏幕。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 1.1: 移动光标
**使用h,j,k,l键来移动光标**
         ^
         k          提示: h在左边，向左移动。
    < h     l >           l在右边，向右移动。
         j                j看起来像一个向下的箭头。
         v

1. 绕着屏幕移动光标，直到你适应。
2. 按住j键不动，现在你知道怎么移动到下一节课了吧！
3. 使用下键移动到1.2课。
注意：如果你不确定你所输入的东西，按一下esc键来让你进入Normal模式，然后重新输入
你所想的命令。
注意：光标键也应该可以工作。但是一旦你熟练后，使用hjkl移动会更快，真的！
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 1.2：退出VIM
 !! 注意：在执行下面的任何一步之前，读完全部的课程。
 1. 按一下esc键（确保你在Normal模式下）
 2. 输入：  :q! enter
    这将会退出编辑器，抛弃你所做的任何修改。
 3. 通过执行你进入这个教程的命令回到这里，它可能是：vimtutor enter;
 4. 如果你记住了这些步骤并且很有自信，执行步骤1到步骤3来退出并且重新进入编辑器。

 注意： :q! enter 将会抛弃你所作出的任何修改，在下面的教程中你会了解到如何保存
 文件。
 5. 将光标移动到Lesson1.3
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 1.3 文本编辑 - 删除 
      ** 按下x键来删除光标下面的一个字符**
1. 移动光标到标记“--->”后面的行。
2. 为了改正错误，移动光标直到它位于将要被删除的字符的上面。
3. 按下x键来删除不想要的字符。
4. 重复2到4，直到整句话都是正确的。
---> The ccow jumpedd ovverr thhe mooon.
5. 现在这句话是正确的了，去看Lesson1.4吧。
注意：当你查看这篇教程的时候，不要尝试去记忆，要通过使用来学习。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 1.4 文本编辑 - 插入
        **按下 i 键来插入文本。**
1. 移动光标到标记“-->”后面的第一行。
2. 为了让第一行和第二行一样，移动光标到文本将要被插入的位置后面的第一个字符上
3. 按下i键，输入必要的附加内容。
4. 每当一个错误被改正后，按下esc来返回Normal模式，重复步骤2到4来改正句子。

---> There is text misng this .
---> There is some text missing from this line.

5. 当你正确输入文本后移动到lesson1.5。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 1.5 文本编辑 - 追加
        ** 按下A键来追加文本**
1. 移动光标到标记“-->”后面的第一行。光标在这行中的位置是无所谓的。
2. 按下A来输入必要的附加内容。
3. 当文本被追加后按下esc键来返回Normal模式
4. 移动光标到标记“-->”后面的第二行，然后重复步骤2到3来改正这个句子。

--> There is some text missing from th
    There is some text missing from the line.
--> There is also some text miss
    There is also some text missing here.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 1.6 编辑文件
        ** 使用 :wq 来保存并退出文件**
！！注意：在执行下面的每一步之前，读完全部的课程。
1. 就像Lesson1.2一样，:q!
    或者如果你可以连接到另一个终端，做下面的事。
2. 在shell提示符下输入这个命令：vim tutor <enter>
    "vim"是启动vim编辑器的命令，"tutor"是你想要编辑的文件的名字，使用可以被更改
    的文件。
3. 根据你在上面的课程中学到的东西插入或者删除文本。
4. 使用 :wq <enter> 保存并且退出vim。
5. 如果你在第一步退出了vimtutor，那么重启vimtutor并且移动到下面的总结。
6. 在阅读并且理解上面的步骤之后：完成它。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 1 总结
1. 光标的移动可以使用方向键和hjkl键。
    h(left)  j(down)  k(up)  l(right)
2. 在命令提示符下输入：vim FileName <enter> 可以启动vim
3. 退出vim： <esc> :q! <enter> 放弃修改
            <esc> :wq <enter>　保存修改
4. 删除光标下的字符：x
5. 插入或者追加文本：
        i 要输入的文本 <esc> 在光标之前插入
        A 要追加的文本 <esc> 在本行末追加。
注意：按下<esc>会让你进入Normal模式还会取消你未完成的命令。

现在继续Lesson2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 2.1 删除命令
    **输入 dw 来删除一个单词**
1. 输入<esc> 来确保你在Normal模式
2. 移动光标到标记“--->”后面的第一行。
3. 移动光标到需要被删除的单词的开头
4. 输入 dw 来让这个单词消失
注意：当你输入字母d后它可能会出现在屏幕的最后一行，Vim会等你输入w，如果你输入了
      其他错误的字符，按下<esc>键重新开始
---> There are a some words fun that don't belong paper in this sentence.
5. 重复步骤3到4直到整句话都是正确的，然后去Lesson 2.2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 2.2 更多删除命令
    ** 输入 d$ 来删除到行末**
1. 输入<esc> 来确保你在Normal模式。
2. 移动光标到标记“--->”后面的第一行。
3. 移动光标到正确的语句的末尾。（在第一个.后面）
4. 输入 d$ 删除到这行的末尾。

---> Somebody typed the end of this line twice. end of this line twice.
 5. 移动到Lesson 2.3 来理解到底发生了什么事。

 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 2.3 操作与移动
许多改变文本的命令都是由一个操作和一个移动组成的。
使用d删除操作符的删除命令的格式如下：
    d motion
where：
    d      - 删除操作符
    motion - 操作符将要操作的对象（在下面列出）
一个简单的移动位置列表：
    w - 直到下个单词的开始，不包含第一个字母
    e - 到当前单词的末尾。包含最后一个字母
    $ - 到当前行的末尾，包含最后一个字符。

因此输入 de 将会从光标开始删除到光标所在单词结尾。
注意：在Normal模式下只输入位置不输入操作符的话将会移动光标。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 2.4 多次移动
    ** 在一个移动前输入一个数字，这个移动会重复指定次数**
1. 移动光标到标记“--->”所在行的开头。
2. 输入 2w 来将光标向前移动两个单词。
3. 输入 3e 来将光标移动到前面第三个单词的末尾。
4. 输入 0 来将光标移动到这行开头
5. 使用不同的数字重复步骤2和3。
---> This is just a line with words you can move around in.
6. 移动到Lesson 2.5

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 2.5 多次删除
    **在操作符后添加数字可以将其重复多次**
在上面提到的删除操作符和移动标记之间插入一个数字可以多次删除：
    d number motion 
1. 移动光标到标记“--->”所在行的第一个大写字母的单词。
2. 输入 d2w 来删除大写字母单词
3. 使用不同的数字重复步骤1和2来使用一个命令删除大写字母单词。

---> this ABC DE line FGHI　JK LMN OP of words is Q RS TUV cleaned up.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 2.6 行操作
    **输入 dd 来删除一整行**
由于删除一整行是很常用的操作，Vi的设计者决定只要简单的输入两个d就可以轻松的删除一行

1. 移动光标到下面的短语中的第二行
2. 输入 dd 来删除一行。
3. 现在移动到第四行。
4. 输入 2dd 来删除两行。

---> 1) Roses are red.
---> 2) Mud is fun.
---> 3) Violets are blue.
---> 4) I have a car.
---> 5) Clocks tell time,
---> 6) Sugar is sweet
---> 7) And so are you.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 2.7 撤销
    **按下 u 来撤销最后一个命令， U 来修复一整行**
1. 移动光标到标记“--->”所在行的第一个错误位置。
2. 输入 x 来删除第一个不需要的字符
3. 现在输入 u 来撤销最后一个执行的命令
4. 使用 x 来修复行中的所有错误。
5. 现在输入大写的 U 来将这行返回原始状态。
6. 现在输入几次 u 来撤销 U 和之前的命令
7. 输入 ctrl-R 几次来重做命令

8. 这些都是十分有用的命令。现在看看Lesson2 的总结吧

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 2 总结
1. 从光标位置删除到下一个单词： dw
2. 从光标位置删除到行末： d$
3. 删除一行： dd

4. 在移动命令前加一个数字来重复它： 2w
5. 更改命令的格式为：
    operator [number] motion  / 经测验，[number] operator
6. 移动到一行的开头 ： 0
7. 撤销上一个动作： u(小写)
   撤销一行的改变：U (大写)
   重做： ctrl-R
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 3.1 粘贴命令
    ** 输入 p 来将之前删除的文本放到光标之后**
1. 移动光标到标记“--->”后面的第一行。
2. 输入 dd 来删除第一行并且将其存储在Vim寄存器中。
3. 移动光标到 c) 行，也就是已经删除掉的行应该放置的位置。
4. 输入 p 来将该行放置在光标所在位置。
5. 重复步骤2到4，来将所有的行都放在合适的位置。

---> d) Can you learn too?
---> b) Violets are blue,
---> c) Intelligence is learned
---> a) Rose are red,
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 3.2 字符替换操作
    **输入 rx 来用x替换光标处的字符
1. 移动光标到标记“--->”所在行的开头。
2. 移动光标到第一个有错误的位置。
3. 按下 r ，然后输入正确的字符。
4. 重复步骤2和3，直到第一行和第二行一样。
---> When this line was typed in, someone pressed some wrong keys!

5. 现在移动到Lesson 3.3
注意：你应该通过操作来学习，而不是记忆。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 3.3 替换操作
    **替换当前单词，输入 ce 。**
1. 移动光标到标记“--->”所在行的开头。
2. 将光标移动到 lubw 中的 u 上。
3. 输入 ce 和正确的单词（此时应当输入 ine）。
4. 输入 <esc> 然后移动到下一个需要替换的字符。
5. 重复步骤3和4直到第一个句子和第二个一样。
---> This lubw has a few wptfd that mrrf changing usf the change operator.
---> This line has a few words that need changing using the change operator.
注意 ce 将会删除指定的单词并让你进入 Insert模式。
我感觉ce等同于 de + i
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 3.4 更多的替换。
    **替换操作符可以使用和delete相同的移动命令**
1. 替换操作符像删除操作符一样工作，格式：
    c [number] motion / [number] c motion
2. 移动命令是相同的，w(单词) $(行末)。
3. 移动光标到标记“--->”后面的第一行。
4. 移动光标到以一个错误的地方。
5. 输入 c$ 和句子剩下的部分。

注意： 在输入时你可以使用退格键修正你的错误
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 3 总结
1. 要粘贴你刚刚删除的文本，输入 p， 这将会把删除的文本粘贴到光标之后，
   如果刚刚删除了一行，文本会被粘贴到光标下面。
2. 要替换光标下的字符，输入 r ，然后输入正确的字符。
3. 替换操作符允许你改变从光标开始到你想去的位置，
    ce c$
4. 格式： c [number] motion
现在去下一个课程吧！

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 4.1 光标位置与文件状态
    **输入 ctrl-g来显示你当前位置和文件信息，输入 G 可以移动到文件中的某一行。
    注意：在执行下面的任何一步之前，读完全部的课程。
1. 按住ctrl不动然后按下g，在底部会出现一个消息，包含文件名和光标位置。
    记住显示的行数，这对于第三步很有用。
注意：你可能会在屏幕右下角看到光标位置。这可以通过设置"ruler"来设置。
2. 按下 G 可以移动到文件底部。
   输入 gg 移动到文件开头。
3. 输入你想去的行数，然后输入 G，可以跳转到该行。
4. 如果你对于上述命令感到很自信，那就执行步骤1到3。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 4.2 搜索命令
    **输入 / 和一个短语可以搜索这个短语。**
1. 在Normal模式输入/，注意到他会出现在屏幕底部，就像:一样。
2. 现在输入'errroor' <enter> ,这是你想要搜索的单词。
3. 搜索下一个，输入 n，
   搜索上一个，输入 N，
4. 想要向上搜索，使用?代替/.
5. 按下ctrl-o可以回到你开始搜索的地方。

注意：当你搜索到达文件末尾后，它会继续从开头寻找，除非'wrapscan'选项被复位。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 4.3 匹配括号搜索
    **输入 % 来查找匹配的括号如 ) ] }**
1. 移动光标到任何括号上。
2. 输入 % 试试
3. 光标将会移动到匹配括号上。
4. 输入 % 会将光标移动到另一个匹配的括号上。
5. 移动光标到另一个其他括号上，看看会发生什么。

注意：这在调试没有匹配括号的程序时非常有用。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 4.4 搜索替换命令
    **输入 :s/old/new/g 可以使用 new 替换 old.**
1. 移动到标记有--->的行
2. 输入  :s/thee/the <enter> ,注意到这个命令只改变了这行中第一次出现的thee
3. 输入  :s/thee/the/g ,添加标记 g 意味着替换一整行，

4. 替换在某两行之间出现的全部字符
    输入 :#,#s/old/new/g  #指的是行号.
   输入  :%s/old/new/g 全局替换。
   输入  :%s/old/new/gc 全局替换，替换时会询问。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 4 总结
1. ctrl-g 显示你当前位置和文件状态。
        G 移动到文件末尾
    num G 移动到指定行。
        gg 移动到文件开头
2. 输入 /phrase 向前搜索 phrase
   输入 ?phrase 向后搜索 phrase
   n 寻找下一个
   N 寻找上一个
   ctrl-o 回到搜索开始位置。
3. 输入 % 匹配括号
4. 替换第一个匹配项：   :s/old/new
   替换一整行的匹配项： :s/old/new/g
   替换某两行之间的匹配项   :#,#s/old/new/g
   全局替换：   :%s/old/new/g
   全局替换加询问 :%s/old/new/gc
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 5.1 如何执行一个外部命令
    **输入 :! 和一个紧随其后的外部命令可以执行这个命令**
1. 输入熟悉的命令 : 来让你的光标到达屏幕底部，这会运行你输入一个命令行命令。
2. 现在输入 ! （感叹号），这会允许你执行一个外部的shell命令
3. 比如在!后面输入ls，然后敲击回车，这将会把当前目录的列表展示给你。就像你在命令
提示符中一样。如果ls不工作，你可以试试dir。

注意：使用这种方法可以执行任何命令，包括参数。
注意：所有的 : 命令都需要 <enter> 结尾。从此以后我们不会一直说他了。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Lesson 5.2 关于写入文件的更多
    **要保存文件的修改，输入 :w FileName**
1. 输入 :!dir 或者 :!ls来列出你的目录，你已经知道必须在后面添加一个回车。
2. 选择一个不存在的文件名，比如 TEST。
3. 现在输入 :w TEST。(TEST是你选择的文件名)
4. 这将会把整个文件内容保存到一个叫TEST的文件中。为了验证这个，输入 :!ls看看

注意： 如果你退出vim然后使用 vim TEST 重新启动，打开的文件将会是你现在保存的向导
的严格拷贝。
5. 删除这个文件，通过输入： :!del TEST (ms-dos) 
                          :!rm TEST (unix)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 5.3 选择文本保存
    **要保存文件中的一部分，输入 v 移动，然后 :w FileName**
1. 移动光标到这行。
2. 按一下v，然后移动光标。注意到文本会高亮。
3. 输入 : ,在屏幕底部会出现 :'<,'>
4. 输入 w TEST，TEST必须是一个没有使用过的文件名。在输入命令之前验证他。
5. vim会把选中行写入文件TEST中。使用 :!ls 看看。现在还不要删除它！我们会在下节课
使用它。

注意： 按下v 会进入 可视化选择。你可以四处移动光标来扩大或缩小选中区域，然后你就可以
使用一些操作符来对他们做一些事情。比如，d 删除这些文本。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Lesson 5.4 